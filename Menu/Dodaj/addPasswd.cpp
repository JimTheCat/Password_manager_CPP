//
// Created by Jimmy on 27.05.2022.
//
/*
    Ta aplikacja została napisana przez Patryka Kłosińskiego.
    Jeśli chcesz wykorzystać ten kod proszę o nie usuwanie tego komentarza!
    Bardzo dziękuje!
    ---------------------------------------------------------------------------
    This app was written by Patryk Kłosiński.
    If you want to use this code please don't delete this comment!
    Thank you very much!
    ---------------------------------------------------------------------------
    GitHub: https://github.com/JimTheCat
    E-Mail: klosinski.patryk2137@gmail.com
 */

#include "addPasswd.h"
#include <vector>
#include <iostream>
#include <fstream>
#include "../../Utils/Decrypting/decrypt.h"
#include "../DodajKat/addCategory.h"

/**
 * Add password to vector
 * @param vec - vector filled with passwords
 * @param isGoodPassword - check if user password is correct
 * @param j - container with categories
 */
void addPasswd::addPassword(std::vector<std::vector<std::string>> &vec, bool isGoodPassword) {
    if (!isGoodPassword) std::cerr << "void addPassword(): Blad! Opcja niedostepna przez niepoprawne haslo do programu" << std::endl;
    else {

        nlohmann::json j;
        std::ifstream i(R"(..\categories.json)");
        if (!i.good()) {
            i.close();
            addCategory::createCategories();
            i.open(R"(..\categories.json)");
        }
        i >> j;
        i.close();

        if (j["categories"].empty()) std::cerr << "void addPassword(): Nie mozna dodac hasla poniewaz nie posiadasz zadnych kategorii" << std::endl;
        else {
            std::vector<std::string> passwordToPush;
            std::string textToPush;
            bool didFoundCategory = false;
            bool isNameUnique = false;
            char answer;
            char page = 'n';
            char login = 'n';

            std::cout << "Czy chcesz wygenerowac losowe haslo? [t/n]: " << std::endl;
            std::cin >> answer;
            if (answer == 't') textToPush = generatePassword();
            else if (answer == 'n') {
                std::cout << "Podaj haslo: " << std::endl;
                std::cin >> textToPush;
                addPasswd::checkingStrengthOfPassword(textToPush);
            }
            passwordToPush.push_back(textToPush);
            std::cout << "Podaj nazwe (nazwa musi byc unikatowa): " << std::endl;
            while (!isNameUnique) {
                std::cin >> textToPush;
                isNameUnique = checkingUniqueOfName(textToPush, vec);
                if (!isNameUnique) std::cout << "Nazwa juz wystapila w innym hasle! Wprowadz inna nazwe: " << std::endl;
                else passwordToPush.push_back(textToPush);
            }
            std::cout << "Podaj kategorie: " << std::endl;
            addPasswd::showCategories(j);
            std::cin >> textToPush;
            for (const auto &k: j["categories"]) {
                if (decrypt(k.get<std::string>()) == textToPush) {
                    passwordToPush.push_back(textToPush);
                    didFoundCategory = true;
                }
            }
            if (!didFoundCategory) throw std::invalid_argument("Nie ma takiej kategorii! Prosze upewnic sie ze taka kategoria istnieje");
            std::cout << "Czy chcesz podac strone WWW? [t/n]: " << std::endl;
            std::cin >> page;
            if (page == 't') {
                std::cout << "Podaj Strone WWW: " << std::endl;
                std::cin >> textToPush;
                passwordToPush.push_back(textToPush);
            }
            else passwordToPush.emplace_back("-");

            std::cout << "Czy chcesz podac login? [t/n]: " << std::endl;
            std::cin >> login;
            if (login == 't') {
                std::cout << "Podaj Login: " << std::endl;
                std::cin >> textToPush;
                passwordToPush.push_back(textToPush);
            } else passwordToPush.emplace_back("-");

            vec.push_back(passwordToPush);
            std::cout << "Haslo zostalo dodane pomyslnie!" << std::endl;
        }
    }
    std::cin.ignore();
    std::cout << "Nacisnij ENTER by kontynuowac" << std::endl;
    std::cin.get();
}

/**
 * Customize random password
 * @return password generated by another function below
 */
std::string addPasswd::generatePassword() {
    int lengthOfPassword;
    char answer;
    bool isUpperCase;
    bool specialLetters;

    std::cout << "Jak dlugie ma byc twoje haslo?: " << std::endl;
    try {
        std::cin >> lengthOfPassword;
    } catch (std::invalid_argument& e) {
        std::cout << e.what() << std::endl;
    }
    std::cout << "Czy ma zawierac duze i male litery? (t/n): " << std::endl;
    std::cin >> answer;
    if (answer == 't') isUpperCase = true;
    else if (answer == 'n') isUpperCase = false;
    else throw std::invalid_argument("generatePassword(): Nie poprawny znak!");
    std::cout << "Czy ma zawierac znaki specjalne? (t/n): " << std::endl;
    std::cin >> answer;
    if (answer == 't') specialLetters = true;
    else if (answer == 'n') specialLetters = false;
    else throw std::invalid_argument("generatePassword(): Nie poprawny znak!");
    return generatedPasswordToReturn(lengthOfPassword, isUpperCase, specialLetters);
}

/**
 * Generate random password with custom parameters
 * @param lengthOfPassword - how long will generate password be
 * @param isUpperCase - if password have to contain big letters
 * @param specialLetters - if password have to contain special letters
 * @return generated password
 */
std::string addPasswd::generatedPasswordToReturn(int lengthOfPassword, bool isUpperCase, bool specialLetters) {
    static const char arrOfNumbers[] = "0123456789";
    static const char arrOfSmallLetters[] = "abcdefghijklmnopqrstuwvxyz";
    static const char arrOfSpecialLetters[] = "!@#$%^&*()";
    static const char arrOfBigLetters[] = "ABCDEFGHIJKLMNOPQRSTUWVXYZ";
    std::string generatedPasswordToReturn;

    for (int i = 0; i < lengthOfPassword; i++) {
        switch (rand() % 4 + 1) {
            case 1:
                generatedPasswordToReturn += arrOfNumbers[rand() % (sizeof(arrOfNumbers) - 1)];
                break;
            case 2:
                generatedPasswordToReturn += arrOfSmallLetters[rand() % (sizeof(arrOfSmallLetters) - 1)];
                break;
            case 3: {
                if (specialLetters)
                    generatedPasswordToReturn += arrOfSpecialLetters[rand() % (sizeof(arrOfSpecialLetters) - 1)];
                else generatedPasswordToReturn += arrOfNumbers[rand() % (sizeof(arrOfNumbers) - 1)];
                break;
            }
            case 4: {
                if (isUpperCase) generatedPasswordToReturn += arrOfBigLetters[rand() % (sizeof(arrOfBigLetters) - 1)];
                else generatedPasswordToReturn += arrOfSmallLetters[rand() % (sizeof(arrOfSmallLetters) - 1)];
                break;
            }
        }
    }

    std::cout << "Twoje haslo to: " << generatedPasswordToReturn << std::endl;
    return generatedPasswordToReturn;
}

/**
 * Print all categories
 */
void addPasswd::showCategories(nlohmann::json j) {
    std::cout << "Oto lista dostepnych kategorii: " << std::endl;
    for (const auto &k: j["categories"]) {
        std::cout << decrypt(k.get<std::string>()) << std::endl;
    }
    std::cout << "\n";
}

/**
 * Check how strong password is
 * @param passwordToCheck - check if user password is correct
 */
void addPasswd::checkingStrengthOfPassword(const std::string &passwordToCheck) {

    const static std::string specialLetters = "!@#$%^&*()";

    bool containSpecialLetters = std::any_of(passwordToCheck.begin(), passwordToCheck.end(), [](auto arg) -> auto {
        return specialLetters.find(arg) != std::string::npos;
    });
    bool containBigLetters = std::any_of(passwordToCheck.begin(), passwordToCheck.end(),
                                         [](auto arg) -> auto { return std::isupper(arg); });

    if (containBigLetters && containSpecialLetters) std::cout << "Twoje haslo jest silne!" << std::endl;
    else if (containBigLetters || containSpecialLetters)
        std::cout << "Twoje haslo jest umiarkowanie silne" << std::endl;
    else std::cout << "Twoje haslo jest slabe" << std::endl;
}

/**
 * Check unique of name
 * @param nameToCheck - name to check
 * @param vec - vector filled with passwords
 * @return true if name is unique otherwise false
 */
bool addPasswd::checkingUniqueOfName(const std::string &nameToCheck, std::vector<std::vector<std::string>> &vec) {
    for (auto &i: vec) {
        if (nameToCheck == i[1]) return false;
    }
    return true;
}